defmodule Digsync.Repo.Migrations.AddGroupRequesterAndAdmins do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:groups) do
      remove :group_admin_id
    end

    create table(:group_requests, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :deleted_at, :utc_datetime_usec, default: fragment("now()")

      add :group_id,
          references(:groups,
            column: :id,
            name: "group_requests_group_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :requester_id,
          references(:users,
            column: :id,
            name: "group_requests_requester_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:group_requests, [:group_id, :requester_id],
             name: "group_requests_unique_group_request_index"
           )

    alter table(:group_memberships) do
      modify :group_type, :text, default: "member"
    end
  end

  def down do
    alter table(:group_memberships) do
      modify :group_type, :text, default: nil
    end

    drop_if_exists unique_index(:group_requests, [:group_id, :requester_id],
                     name: "group_requests_unique_group_request_index"
                   )

    drop constraint(:group_requests, "group_requests_group_id_fkey")

    drop constraint(:group_requests, "group_requests_requester_id_fkey")

    drop table(:group_requests)

    alter table(:groups) do
      remove :group_admin_id

      add :group_admin_id,
          references(:users,
            column: :id,
            name: "groups_group_admin_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end
end
