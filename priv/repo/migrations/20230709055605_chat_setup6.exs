defmodule Digsync.Repo.Migrations.ChatSetup6 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop constraint("events", "events_pkey")

    create table(:private_messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :message_id, :uuid, null: false, primary_key: true
      add :first_id, :uuid, null: false, primary_key: true
      add :second_id, :uuid, null: false, primary_key: true
    end

    create table(:messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:private_messages) do
      modify :message_id,
             references(:messages,
               column: :id,
               name: "private_messages_message_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :first_id,
             references(:users,
               column: :id,
               name: "private_messages_first_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :second_id,
             references(:users,
               column: :id,
               name: "private_messages_second_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:messages) do
      add :text, :text
    end

    create table(:groups, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false
      add :description, :text, null: false
      add :locaton, :text
      add :preferred_location, :text
      add :type, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :creator_id,
          references(:users,
            column: :id,
            name: "groups_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:friendships, [:first_id, :second_id],
             name: "friendships_unique_friendship_index"
           )

    alter table(:events) do
      add :min_age_range, :bigint
      add :max_age_range, :bigint

      add :creator_id,
          references(:users,
            column: :id,
            name: "events_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end
  end

  def down do
    drop constraint("events", "events_pkey")

    drop constraint(:events, "events_creator_id_fkey")

    alter table(:events) do
      remove :creator_id
      remove :max_age_range
      remove :min_age_range
    end

    drop_if_exists unique_index(:friendships, [:first_id, :second_id],
                     name: "friendships_unique_friendship_index"
                   )

    drop constraint(:groups, "groups_creator_id_fkey")

    drop table(:groups)

    alter table(:messages) do
      remove :text
    end

    drop constraint(:private_messages, "private_messages_message_id_fkey")

    drop constraint(:private_messages, "private_messages_first_id_fkey")

    drop constraint(:private_messages, "private_messages_second_id_fkey")

    alter table(:private_messages) do
      modify :second_id, :uuid
      modify :first_id, :uuid
      modify :message_id, :uuid
    end

    drop table(:messages)

    drop table(:private_messages)
  end
end