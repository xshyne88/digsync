defmodule Digsync.Repo.Migrations.Initial do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :email, :citext, null: false
      add :user_type, :text, default: "user"
      add :create_type, :text, default: "password"
      add :address, :text
      add :hashed_password, :text, null: false
      add :first_name, :text
      add :last_name, :text
      add :phone_number, :text
      add :facebook_link, :text
      add :instagram_link, :text
      add :linkedin_link, :text
      add :github_link, :text
      add :gender, :text, default: "male"
      add :age, :bigint
      add :bio, :text
      add :skill_level, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:private_messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :message_id, :uuid, null: false, primary_key: true
      add :recipient_id, :uuid, null: false, primary_key: true
    end

    create table(:messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :text, :text

      add :author_id,
          references(:users,
            column: :id,
            name: "messages_author_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:messages, [:id], name: "messages_unique_message_id_index")

    alter table(:private_messages) do
      modify :message_id,
             references(:messages,
               column: :id,
               name: "private_messages_message_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :recipient_id,
             references(:users,
               column: :id,
               name: "private_messages_recipient_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create table(:groups, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false
      add :description, :text, null: false
      add :locaton, :text
      add :preferred_location, :text
      add :type, :text, default: "social"
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :creator_id,
          references(:users,
            column: :id,
            name: "groups_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:groups, [:id], name: "groups_unique_group_id_index")

    create unique_index(:groups, [:name], name: "groups_unique_group_name_index")

    create table(:group_memberships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :group_type, :text

      add :group_id,
          references(:groups,
            column: :id,
            name: "group_memberships_group_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :member_id,
          references(:users,
            column: :id,
            name: "group_memberships_member_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create table(:friendships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :friend_one_id,
          references(:users,
            column: :id,
            name: "friendships_friend_one_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :friend_two_id,
          references(:users,
            column: :id,
            name: "friendships_friend_two_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:friendships, [:friend_one_id, :friend_two_id],
             name: "friendships_unique_friendship_index"
           )

    create table(:friend_requests, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :sender_id,
          references(:users,
            column: :id,
            name: "friend_requests_sender_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :receiver_id,
          references(:users,
            column: :id,
            name: "friend_requests_receiver_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:friend_requests, [:sender_id, :receiver_id],
             name: "friend_requests_unique_friend_request_index"
           )

    create table(:events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :start_at, :utc_datetime
      add :end_at, :utc_datetime
      add :geo_point, :geometry
      add :city, :text
      add :state, :text
      add :address, :text
      add :description, :text, default: ""
      add :min_age_range, :bigint
      add :max_age_range, :bigint
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :creator_id,
          references(:users,
            column: :id,
            name: "events_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end
  end

  def down do
    drop constraint(:events, "events_creator_id_fkey")

    drop table(:events)

    drop_if_exists unique_index(:friend_requests, [:sender_id, :receiver_id],
                     name: "friend_requests_unique_friend_request_index"
                   )

    drop constraint(:friend_requests, "friend_requests_sender_id_fkey")

    drop constraint(:friend_requests, "friend_requests_receiver_id_fkey")

    drop table(:friend_requests)

    drop_if_exists unique_index(:friendships, [:friend_one_id, :friend_two_id],
                     name: "friendships_unique_friendship_index"
                   )

    drop constraint(:friendships, "friendships_friend_one_id_fkey")

    drop constraint(:friendships, "friendships_friend_two_id_fkey")

    drop table(:friendships)

    drop constraint(:group_memberships, "group_memberships_group_id_fkey")

    drop constraint(:group_memberships, "group_memberships_member_id_fkey")

    drop table(:group_memberships)

    drop_if_exists unique_index(:groups, [:name], name: "groups_unique_group_name_index")

    drop_if_exists unique_index(:groups, [:id], name: "groups_unique_group_id_index")

    drop constraint(:groups, "groups_creator_id_fkey")

    drop table(:groups)

    drop constraint(:private_messages, "private_messages_message_id_fkey")

    drop constraint(:private_messages, "private_messages_recipient_id_fkey")

    alter table(:private_messages) do
      modify :recipient_id, :uuid
      modify :message_id, :uuid
    end

    drop_if_exists unique_index(:messages, [:id], name: "messages_unique_message_id_index")

    drop constraint(:messages, "messages_author_id_fkey")

    drop table(:messages)

    drop table(:private_messages)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
